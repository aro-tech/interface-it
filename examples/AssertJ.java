package org.interfaceit.util.mixin;

import java.io.File; 
import java.io.InputStream; 
import java.lang.Boolean; 
import java.lang.Byte; 
import java.lang.CharSequence; 
import java.lang.Character; 
import java.lang.Class; 
import java.lang.Comparable; 
import java.lang.Double; 
import java.lang.Float; 
import java.lang.Integer; 
import java.lang.Iterable; 
import java.lang.Long; 
import java.lang.Object; 
import java.lang.Short; 
import java.lang.String; 
import java.lang.Throwable; 
import java.math.BigDecimal; 
import java.net.URI; 
import java.net.URL; 
import java.nio.charset.Charset; 
import java.nio.file.Path; 
import java.text.DateFormat; 
import java.time.LocalDate; 
import java.time.LocalDateTime; 
import java.time.LocalTime; 
import java.time.OffsetDateTime; 
import java.time.OffsetTime; 
import java.time.ZonedDateTime; 
import java.util.Date; 
import java.util.Iterator; 
import java.util.List; 
import java.util.Map; 
import java.util.Optional; 
import java.util.OptionalDouble; 
import java.util.OptionalInt; 
import java.util.OptionalLong; 
import java.util.concurrent.CompletableFuture; 
import java.util.stream.Stream; 
import org.assertj.core.api.AbstractBigDecimalAssert; 
import org.assertj.core.api.AbstractBooleanArrayAssert; 
import org.assertj.core.api.AbstractBooleanAssert; 
import org.assertj.core.api.AbstractByteArrayAssert; 
import org.assertj.core.api.AbstractByteAssert; 
import org.assertj.core.api.AbstractCharArrayAssert; 
import org.assertj.core.api.AbstractCharSequenceAssert; 
import org.assertj.core.api.AbstractCharacterAssert; 
import org.assertj.core.api.AbstractClassAssert; 
import org.assertj.core.api.AbstractComparableAssert; 
import org.assertj.core.api.AbstractDateAssert; 
import org.assertj.core.api.AbstractDoubleArrayAssert; 
import org.assertj.core.api.AbstractDoubleAssert; 
import org.assertj.core.api.AbstractFileAssert; 
import org.assertj.core.api.AbstractFloatArrayAssert; 
import org.assertj.core.api.AbstractFloatAssert; 
import org.assertj.core.api.AbstractInputStreamAssert; 
import org.assertj.core.api.AbstractIntArrayAssert; 
import org.assertj.core.api.AbstractIntegerAssert; 
import org.assertj.core.api.AbstractIterableAssert; 
import org.assertj.core.api.AbstractListAssert; 
import org.assertj.core.api.AbstractLocalDateAssert; 
import org.assertj.core.api.AbstractLocalDateTimeAssert; 
import org.assertj.core.api.AbstractLocalTimeAssert; 
import org.assertj.core.api.AbstractLongArrayAssert; 
import org.assertj.core.api.AbstractLongAssert; 
import org.assertj.core.api.AbstractObjectArrayAssert; 
import org.assertj.core.api.AbstractObjectAssert; 
import org.assertj.core.api.AbstractOffsetDateTimeAssert; 
import org.assertj.core.api.AbstractOffsetTimeAssert; 
import org.assertj.core.api.AbstractPathAssert; 
import org.assertj.core.api.AbstractShortArrayAssert; 
import org.assertj.core.api.AbstractShortAssert; 
import org.assertj.core.api.AbstractThrowableAssert; 
import org.assertj.core.api.AbstractUriAssert; 
import org.assertj.core.api.AbstractUrlAssert; 
import org.assertj.core.api.AbstractZonedDateTimeAssert; 
import org.assertj.core.api.AssertDelegateTarget; 
import org.assertj.core.api.AssertProvider; 
import org.assertj.core.api.Assertions; 
import org.assertj.core.api.CompletableFutureAssert; 
import org.assertj.core.api.Condition; 
import org.assertj.core.api.MapAssert; 
import org.assertj.core.api.OptionalAssert; 
import org.assertj.core.api.OptionalDoubleAssert; 
import org.assertj.core.api.OptionalIntAssert; 
import org.assertj.core.api.OptionalLongAssert; 
import org.assertj.core.api.ThrowableAssert; 
import org.assertj.core.api.ThrowableTypeAssert; 
import org.assertj.core.api.filter.Filters; 
import org.assertj.core.api.filter.InFilter; 
import org.assertj.core.api.filter.NotFilter; 
import org.assertj.core.api.filter.NotInFilter; 
import org.assertj.core.condition.DoesNotHave; 
import org.assertj.core.condition.Not; 
import org.assertj.core.data.Index; 
import org.assertj.core.data.MapEntry; 
import org.assertj.core.data.Offset; 
import org.assertj.core.data.Percentage; 
import org.assertj.core.groups.Properties; 
import org.assertj.core.groups.Tuple; 

/** 
 * Wrapper of static elements in org.assertj.core.api.Assertions
 * Generated by Interface-It: https://github.com/aro-tech/interface-it
 * {@link org.assertj.core.api.Assertions}
 */
public interface AssertJ {


    // CONSTANTS: 


    // DELEGATE METHODS: 

    /**
     * Delegate call to public static <T> org.assertj.core.api.Condition<T> org.assertj.core.api.Assertions.allOf(org.assertj.core.api.Condition<? super T>...)
     * {@link org.assertj.core.api.Assertions#allOf(org.assertj.core.api.Condition[])}
     */
    default <T> Condition<T> allOf(Condition<? super T>... conditions) {
        return Assertions.allOf(conditions);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.Condition<T> org.assertj.core.api.Assertions.allOf(java.lang.Iterable<? extends org.assertj.core.api.Condition<? super T>>)
     * {@link org.assertj.core.api.Assertions#allOf(java.lang.Iterable)}
     */
    default <T> Condition<T> allOf(Iterable<? extends Condition<? super T>> conditions) {
        return Assertions.allOf(conditions);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.Condition<T> org.assertj.core.api.Assertions.anyOf(org.assertj.core.api.Condition<? super T>...)
     * {@link org.assertj.core.api.Assertions#anyOf(org.assertj.core.api.Condition[])}
     */
    default <T> Condition<T> anyOf(Condition<? super T>... conditions) {
        return Assertions.anyOf(conditions);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.Condition<T> org.assertj.core.api.Assertions.anyOf(java.lang.Iterable<? extends org.assertj.core.api.Condition<? super T>>)
     * {@link org.assertj.core.api.Assertions#anyOf(java.lang.Iterable)}
     */
    default <T> Condition<T> anyOf(Iterable<? extends Condition<? super T>> conditions) {
        return Assertions.anyOf(conditions);
    }



    /**
     * Delegate call to public static <T> T org.assertj.core.api.Assertions.assertThat(org.assertj.core.api.AssertProvider<T>)
     * {@link org.assertj.core.api.Assertions#assertThat(org.assertj.core.api.AssertProvider)}
     */
    default <T> T assertThat(AssertProvider<T> component) {
        return Assertions.assertThat(component);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractBigDecimalAssert<?> org.assertj.core.api.Assertions.assertThat(java.math.BigDecimal)
     * {@link org.assertj.core.api.Assertions#assertThat(java.math.BigDecimal)}
     */
    default AbstractBigDecimalAssert<?> assertThat(BigDecimal actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractBooleanAssert<?> org.assertj.core.api.Assertions.assertThat(boolean)
     * {@link org.assertj.core.api.Assertions#assertThat(boolean)}
     */
    default AbstractBooleanAssert<?> assertThat(boolean actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractBooleanAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Boolean)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Boolean)}
     */
    default AbstractBooleanAssert<?> assertThat(Boolean actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractBooleanArrayAssert<?> org.assertj.core.api.Assertions.assertThat(boolean[])
     * {@link org.assertj.core.api.Assertions#assertThat(boolean[])}
     */
    default AbstractBooleanArrayAssert<?> assertThat(boolean[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractByteAssert<?> org.assertj.core.api.Assertions.assertThat(byte)
     * {@link org.assertj.core.api.Assertions#assertThat(byte)}
     */
    default AbstractByteAssert<?> assertThat(byte actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractByteAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Byte)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Byte)}
     */
    default AbstractByteAssert<?> assertThat(Byte actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractByteArrayAssert<?> org.assertj.core.api.Assertions.assertThat(byte[])
     * {@link org.assertj.core.api.Assertions#assertThat(byte[])}
     */
    default AbstractByteArrayAssert<?> assertThat(byte[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractCharacterAssert<?> org.assertj.core.api.Assertions.assertThat(char)
     * {@link org.assertj.core.api.Assertions#assertThat(char)}
     */
    default AbstractCharacterAssert<?> assertThat(char actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractCharArrayAssert<?> org.assertj.core.api.Assertions.assertThat(char[])
     * {@link org.assertj.core.api.Assertions#assertThat(char[])}
     */
    default AbstractCharArrayAssert<?> assertThat(char[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractCharacterAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Character)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Character)}
     */
    default AbstractCharacterAssert<?> assertThat(Character actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractCharSequenceAssert<?, ? extends java.lang.CharSequence> org.assertj.core.api.Assertions.assertThat(java.lang.CharSequence)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.CharSequence)}
     */
    default AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(CharSequence actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractClassAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Class<?>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Class)}
     */
    default AbstractClassAssert<?> assertThat(Class<?> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.CompletableFutureAssert<T> org.assertj.core.api.Assertions.assertThat(java.util.concurrent.CompletableFuture<T>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.concurrent.CompletableFuture)}
     */
    default <T> CompletableFutureAssert<T> assertThat(CompletableFuture<T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractDateAssert<?> org.assertj.core.api.Assertions.assertThat(java.util.Date)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.Date)}
     */
    default AbstractDateAssert<?> assertThat(Date actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractDoubleAssert<?> org.assertj.core.api.Assertions.assertThat(double)
     * {@link org.assertj.core.api.Assertions#assertThat(double)}
     */
    default AbstractDoubleAssert<?> assertThat(double actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractDoubleAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Double)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Double)}
     */
    default AbstractDoubleAssert<?> assertThat(Double actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractDoubleArrayAssert<?> org.assertj.core.api.Assertions.assertThat(double[])
     * {@link org.assertj.core.api.Assertions#assertThat(double[])}
     */
    default AbstractDoubleArrayAssert<?> assertThat(double[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractFileAssert<?> org.assertj.core.api.Assertions.assertThat(java.io.File)
     * {@link org.assertj.core.api.Assertions#assertThat(java.io.File)}
     */
    default AbstractFileAssert<?> assertThat(File actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractFloatAssert<?> org.assertj.core.api.Assertions.assertThat(float)
     * {@link org.assertj.core.api.Assertions#assertThat(float)}
     */
    default AbstractFloatAssert<?> assertThat(float actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractFloatAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Float)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Float)}
     */
    default AbstractFloatAssert<?> assertThat(Float actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractFloatArrayAssert<?> org.assertj.core.api.Assertions.assertThat(float[])
     * {@link org.assertj.core.api.Assertions#assertThat(float[])}
     */
    default AbstractFloatArrayAssert<?> assertThat(float[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractInputStreamAssert<?, ? extends java.io.InputStream> org.assertj.core.api.Assertions.assertThat(java.io.InputStream)
     * {@link org.assertj.core.api.Assertions#assertThat(java.io.InputStream)}
     */
    default AbstractInputStreamAssert<?, ? extends InputStream> assertThat(InputStream actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractIntegerAssert<?> org.assertj.core.api.Assertions.assertThat(int)
     * {@link org.assertj.core.api.Assertions#assertThat(int)}
     */
    default AbstractIntegerAssert<?> assertThat(int actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractIntArrayAssert<?> org.assertj.core.api.Assertions.assertThat(int[])
     * {@link org.assertj.core.api.Assertions#assertThat(int[])}
     */
    default AbstractIntArrayAssert<?> assertThat(int[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractIntegerAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Integer)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Integer)}
     */
    default AbstractIntegerAssert<?> assertThat(Integer actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.AbstractIterableAssert<?, ? extends java.lang.Iterable<? extends T>, T> org.assertj.core.api.Assertions.assertThat(java.lang.Iterable<? extends T>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Iterable)}
     */
    default <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> assertThat(Iterable<? extends T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.AbstractIterableAssert<?, ? extends java.lang.Iterable<? extends T>, T> org.assertj.core.api.Assertions.assertThat(java.util.Iterator<? extends T>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.Iterator)}
     */
    default <T> AbstractIterableAssert<?, ? extends Iterable<? extends T>, T> assertThat(Iterator<? extends T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.AbstractListAssert<?, ? extends java.util.List<? extends T>, T> org.assertj.core.api.Assertions.assertThat(java.util.List<? extends T>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.List)}
     */
    default <T> AbstractListAssert<?, ? extends List<? extends T>, T> assertThat(List<? extends T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractLocalDateAssert<?> org.assertj.core.api.Assertions.assertThat(java.time.LocalDate)
     * {@link org.assertj.core.api.Assertions#assertThat(java.time.LocalDate)}
     */
    default AbstractLocalDateAssert<?> assertThat(LocalDate actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractLocalDateTimeAssert<?> org.assertj.core.api.Assertions.assertThat(java.time.LocalDateTime)
     * {@link org.assertj.core.api.Assertions#assertThat(java.time.LocalDateTime)}
     */
    default AbstractLocalDateTimeAssert<?> assertThat(LocalDateTime actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractLocalTimeAssert<?> org.assertj.core.api.Assertions.assertThat(java.time.LocalTime)
     * {@link org.assertj.core.api.Assertions#assertThat(java.time.LocalTime)}
     */
    default AbstractLocalTimeAssert<?> assertThat(LocalTime actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractLongAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Long)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Long)}
     */
    default AbstractLongAssert<?> assertThat(Long actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractLongAssert<?> org.assertj.core.api.Assertions.assertThat(long)
     * {@link org.assertj.core.api.Assertions#assertThat(long)}
     */
    default AbstractLongAssert<?> assertThat(long actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractLongArrayAssert<?> org.assertj.core.api.Assertions.assertThat(long[])
     * {@link org.assertj.core.api.Assertions#assertThat(long[])}
     */
    default AbstractLongArrayAssert<?> assertThat(long[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <K,V> org.assertj.core.api.MapAssert<K, V> org.assertj.core.api.Assertions.assertThat(java.util.Map<K, V>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.Map)}
     */
    default <K,V> MapAssert<K, V> assertThat(Map<K, V> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractOffsetDateTimeAssert<?> org.assertj.core.api.Assertions.assertThat(java.time.OffsetDateTime)
     * {@link org.assertj.core.api.Assertions#assertThat(java.time.OffsetDateTime)}
     */
    default AbstractOffsetDateTimeAssert<?> assertThat(OffsetDateTime actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractOffsetTimeAssert<?> org.assertj.core.api.Assertions.assertThat(java.time.OffsetTime)
     * {@link org.assertj.core.api.Assertions#assertThat(java.time.OffsetTime)}
     */
    default AbstractOffsetTimeAssert<?> assertThat(OffsetTime actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.OptionalAssert<T> org.assertj.core.api.Assertions.assertThat(java.util.Optional<T>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.Optional)}
     */
    default <T> OptionalAssert<T> assertThat(Optional<T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.OptionalDoubleAssert org.assertj.core.api.Assertions.assertThat(java.util.OptionalDouble)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.OptionalDouble)}
     */
    default OptionalDoubleAssert assertThat(OptionalDouble actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.OptionalIntAssert org.assertj.core.api.Assertions.assertThat(java.util.OptionalInt)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.OptionalInt)}
     */
    default OptionalIntAssert assertThat(OptionalInt actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.OptionalLongAssert org.assertj.core.api.Assertions.assertThat(java.util.OptionalLong)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.OptionalLong)}
     */
    default OptionalLongAssert assertThat(OptionalLong actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractPathAssert<?> org.assertj.core.api.Assertions.assertThat(java.nio.file.Path)
     * {@link org.assertj.core.api.Assertions#assertThat(java.nio.file.Path)}
     */
    default AbstractPathAssert<?> assertThat(Path actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractShortAssert<?> org.assertj.core.api.Assertions.assertThat(java.lang.Short)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Short)}
     */
    default AbstractShortAssert<?> assertThat(Short actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractShortAssert<?> org.assertj.core.api.Assertions.assertThat(short)
     * {@link org.assertj.core.api.Assertions#assertThat(short)}
     */
    default AbstractShortAssert<?> assertThat(short actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractShortArrayAssert<?> org.assertj.core.api.Assertions.assertThat(short[])
     * {@link org.assertj.core.api.Assertions#assertThat(short[])}
     */
    default AbstractShortArrayAssert<?> assertThat(short[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.AbstractListAssert<?, ? extends java.util.List<? extends T>, T> org.assertj.core.api.Assertions.assertThat(java.util.stream.Stream<? extends T>)
     * {@link org.assertj.core.api.Assertions#assertThat(java.util.stream.Stream)}
     */
    default <T> AbstractListAssert<?, ? extends List<? extends T>, T> assertThat(Stream<? extends T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractCharSequenceAssert<?, java.lang.String> org.assertj.core.api.Assertions.assertThat(java.lang.String)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.String)}
     */
    default AbstractCharSequenceAssert<?, String> assertThat(String actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> T org.assertj.core.api.Assertions.assertThat(T)
     * {@link org.assertj.core.api.Assertions#assertThat(org.assertj.core.api.AssertDelegateTarget)}
     */
    default <T extends AssertDelegateTarget> T assertThat(T assertion) {
        return Assertions.assertThat(assertion);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.AbstractComparableAssert<?, T> org.assertj.core.api.Assertions.assertThat(T)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Comparable)}
     */
    default <T extends Comparable<? super T>> AbstractComparableAssert<?, T> assertThat(T assertion) {
        return Assertions.assertThat(assertion);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.AbstractObjectAssert<?, T> org.assertj.core.api.Assertions.assertThat(T)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Object)}
     */
    default <T> AbstractObjectAssert<?, T> assertThat(T assertion) {
        return Assertions.assertThat(assertion);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.AbstractObjectArrayAssert<?, T> org.assertj.core.api.Assertions.assertThat(T[])
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Object[])}
     */
    default <T> AbstractObjectArrayAssert<?, T> assertThat(T[] actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractThrowableAssert<?, ? extends java.lang.Throwable> org.assertj.core.api.Assertions.assertThat(java.lang.Throwable)
     * {@link org.assertj.core.api.Assertions#assertThat(java.lang.Throwable)}
     */
    default AbstractThrowableAssert<?, ? extends Throwable> assertThat(Throwable actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractUriAssert<?> org.assertj.core.api.Assertions.assertThat(java.net.URI)
     * {@link org.assertj.core.api.Assertions#assertThat(java.net.URI)}
     */
    default AbstractUriAssert<?> assertThat(URI actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractUrlAssert<?> org.assertj.core.api.Assertions.assertThat(java.net.URL)
     * {@link org.assertj.core.api.Assertions#assertThat(java.net.URL)}
     */
    default AbstractUrlAssert<?> assertThat(URL actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractZonedDateTimeAssert<?> org.assertj.core.api.Assertions.assertThat(java.time.ZonedDateTime)
     * {@link org.assertj.core.api.Assertions#assertThat(java.time.ZonedDateTime)}
     */
    default AbstractZonedDateTimeAssert<?> assertThat(ZonedDateTime actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.api.ThrowableTypeAssert<T> org.assertj.core.api.Assertions.assertThatExceptionOfType(java.lang.Class<? extends T>)
     * {@link org.assertj.core.api.Assertions#assertThatExceptionOfType(java.lang.Class)}
     */
    default <T extends Throwable> ThrowableTypeAssert<T> assertThatExceptionOfType(Class<? extends T> exceptionType) {
        return Assertions.assertThatExceptionOfType(exceptionType);
    }



    /**
     * Delegate call to public static org.assertj.core.api.AbstractThrowableAssert<?, ? extends java.lang.Throwable> org.assertj.core.api.Assertions.assertThatThrownBy(org.assertj.core.api.ThrowableAssert$ThrowingCallable)
     * {@link org.assertj.core.api.Assertions#assertThatThrownBy(org.assertj.core.api.ThrowableAssert$ThrowingCallable)}
     */
    default AbstractThrowableAssert<?, ? extends Throwable> assertThatThrownBy(ThrowableAssert.ThrowingCallable shouldRaiseThrowable) {
        return Assertions.assertThatThrownBy(shouldRaiseThrowable);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Index org.assertj.core.api.Assertions.atIndex(int)
     * {@link org.assertj.core.api.Assertions#atIndex(int)}
     */
    default Index atIndex(int index) {
        return Assertions.atIndex(index);
    }



    /**
     * Delegate call to public static java.lang.Throwable org.assertj.core.api.Assertions.catchThrowable(org.assertj.core.api.ThrowableAssert$ThrowingCallable)
     * {@link org.assertj.core.api.Assertions#catchThrowable(org.assertj.core.api.ThrowableAssert$ThrowingCallable)}
     */
    default Throwable catchThrowable(ThrowableAssert.ThrowingCallable shouldRaiseThrowable) {
        return Assertions.catchThrowable(shouldRaiseThrowable);
    }



    /**
     * Delegate call to public static java.lang.String org.assertj.core.api.Assertions.contentOf(java.io.File)
     * {@link org.assertj.core.api.Assertions#contentOf(java.io.File)}
     */
    default String contentOf(File file) {
        return Assertions.contentOf(file);
    }



    /**
     * Delegate call to public static java.lang.String org.assertj.core.api.Assertions.contentOf(java.net.URL)
     * {@link org.assertj.core.api.Assertions#contentOf(java.net.URL)}
     */
    default String contentOf(URL url) {
        return Assertions.contentOf(url);
    }



    /**
     * Delegate call to public static java.lang.String org.assertj.core.api.Assertions.contentOf(java.io.File,java.nio.charset.Charset)
     * {@link org.assertj.core.api.Assertions#contentOf(java.io.File,java.nio.charset.Charset)}
     */
    default String contentOf(File file, Charset charset) {
        return Assertions.contentOf(file, charset);
    }



    /**
     * Delegate call to public static java.lang.String org.assertj.core.api.Assertions.contentOf(java.io.File,java.lang.String)
     * {@link org.assertj.core.api.Assertions#contentOf(java.io.File,java.lang.String)}
     */
    default String contentOf(File file, String charsetName) {
        return Assertions.contentOf(file, charsetName);
    }



    /**
     * Delegate call to public static java.lang.String org.assertj.core.api.Assertions.contentOf(java.net.URL,java.nio.charset.Charset)
     * {@link org.assertj.core.api.Assertions#contentOf(java.net.URL,java.nio.charset.Charset)}
     */
    default String contentOf(URL url, Charset charset) {
        return Assertions.contentOf(url, charset);
    }



    /**
     * Delegate call to public static java.lang.String org.assertj.core.api.Assertions.contentOf(java.net.URL,java.lang.String)
     * {@link org.assertj.core.api.Assertions#contentOf(java.net.URL,java.lang.String)}
     */
    default String contentOf(URL url, String charsetName) {
        return Assertions.contentOf(url, charsetName);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.condition.DoesNotHave<T> org.assertj.core.api.Assertions.doesNotHave(org.assertj.core.api.Condition<? super T>)
     * {@link org.assertj.core.api.Assertions#doesNotHave(org.assertj.core.api.Condition)}
     */
    default <T> DoesNotHave<T> doesNotHave(Condition<? super T> condition) {
        return Assertions.doesNotHave(condition);
    }



    /**
     * Delegate call to public static <K,V> org.assertj.core.data.MapEntry<K, V> org.assertj.core.api.Assertions.entry(K,V)
     * {@link org.assertj.core.api.Assertions#entry(java.lang.Object,java.lang.Object)}
     */
    default <K,V> MapEntry<K, V> entry(K key, V value) {
        return Assertions.entry(key, value);
    }



    /**
     * Delegate call to public static org.assertj.core.groups.Properties<java.lang.Object> org.assertj.core.api.Assertions.extractProperty(java.lang.String)
     * {@link org.assertj.core.api.Assertions#extractProperty(java.lang.String)}
     */
    default Properties<Object> extractProperty(String propertyName) {
        return Assertions.extractProperty(propertyName);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.groups.Properties<T> org.assertj.core.api.Assertions.extractProperty(java.lang.String,java.lang.Class<T>)
     * {@link org.assertj.core.api.Assertions#extractProperty(java.lang.String,java.lang.Class)}
     */
    default <T> Properties<T> extractProperty(String propertyName, Class<T> propertyType) {
        return Assertions.extractProperty(propertyName, propertyType);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.fail(java.lang.String)
     * {@link org.assertj.core.api.Assertions#fail(java.lang.String)}
     */
    default void fail(String failureMessage) {
        Assertions.fail(failureMessage);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.fail(java.lang.String,java.lang.Throwable)
     * {@link org.assertj.core.api.Assertions#fail(java.lang.String,java.lang.Throwable)}
     */
    default void fail(String failureMessage, Throwable realCause) {
        Assertions.fail(failureMessage, realCause);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown(java.lang.Class<? extends java.lang.Throwable>)
     * {@link org.assertj.core.api.Assertions#failBecauseExceptionWasNotThrown(java.lang.Class)}
     */
    default void failBecauseExceptionWasNotThrown(Class<? extends Throwable> exceptionClass) {
        Assertions.failBecauseExceptionWasNotThrown(exceptionClass);
    }



    /**
     * Delegate call to public static <E> org.assertj.core.api.filter.Filters<E> org.assertj.core.api.Assertions.filter(E[])
     * {@link org.assertj.core.api.Assertions#filter(java.lang.Object[])}
     */
    default <E> Filters<E> filter(E[] array) {
        return Assertions.filter(array);
    }



    /**
     * Delegate call to public static <E> org.assertj.core.api.filter.Filters<E> org.assertj.core.api.Assertions.filter(java.lang.Iterable<E>)
     * {@link org.assertj.core.api.Assertions#filter(java.lang.Iterable)}
     */
    default <E> Filters<E> filter(Iterable<E> iterableToFilter) {
        return Assertions.filter(iterableToFilter);
    }



    /**
     * Delegate call to public static org.assertj.core.api.filter.InFilter org.assertj.core.api.Assertions.in(java.lang.Object...)
     * {@link org.assertj.core.api.Assertions#in(java.lang.Object[])}
     */
    default InFilter in(Object... values) {
        return Assertions.in(values);
    }



    /**
     * Delegate call to public static java.util.List<java.lang.String> org.assertj.core.api.Assertions.linesOf(java.io.File)
     * {@link org.assertj.core.api.Assertions#linesOf(java.io.File)}
     */
    default List<String> linesOf(File file) {
        return Assertions.linesOf(file);
    }



    /**
     * Delegate call to public static java.util.List<java.lang.String> org.assertj.core.api.Assertions.linesOf(java.net.URL)
     * {@link org.assertj.core.api.Assertions#linesOf(java.net.URL)}
     */
    default List<String> linesOf(URL url) {
        return Assertions.linesOf(url);
    }



    /**
     * Delegate call to public static java.util.List<java.lang.String> org.assertj.core.api.Assertions.linesOf(java.io.File,java.nio.charset.Charset)
     * {@link org.assertj.core.api.Assertions#linesOf(java.io.File,java.nio.charset.Charset)}
     */
    default List<String> linesOf(File file, Charset charset) {
        return Assertions.linesOf(file, charset);
    }



    /**
     * Delegate call to public static java.util.List<java.lang.String> org.assertj.core.api.Assertions.linesOf(java.io.File,java.lang.String)
     * {@link org.assertj.core.api.Assertions#linesOf(java.io.File,java.lang.String)}
     */
    default List<String> linesOf(File file, String charsetName) {
        return Assertions.linesOf(file, charsetName);
    }



    /**
     * Delegate call to public static java.util.List<java.lang.String> org.assertj.core.api.Assertions.linesOf(java.net.URL,java.nio.charset.Charset)
     * {@link org.assertj.core.api.Assertions#linesOf(java.net.URL,java.nio.charset.Charset)}
     */
    default List<String> linesOf(URL url, Charset charset) {
        return Assertions.linesOf(url, charset);
    }



    /**
     * Delegate call to public static java.util.List<java.lang.String> org.assertj.core.api.Assertions.linesOf(java.net.URL,java.lang.String)
     * {@link org.assertj.core.api.Assertions#linesOf(java.net.URL,java.lang.String)}
     */
    default List<String> linesOf(URL url, String charsetName) {
        return Assertions.linesOf(url, charsetName);
    }



    /**
     * Delegate call to public static <T> org.assertj.core.condition.Not<T> org.assertj.core.api.Assertions.not(org.assertj.core.api.Condition<? super T>)
     * {@link org.assertj.core.api.Assertions#not(org.assertj.core.api.Condition)}
     */
    default <T> Not<T> not(Condition<? super T> condition) {
        return Assertions.not(condition);
    }



    /**
     * Delegate call to public static org.assertj.core.api.filter.NotFilter org.assertj.core.api.Assertions.not(java.lang.Object)
     * {@link org.assertj.core.api.Assertions#not(java.lang.Object)}
     */
    default NotFilter not(Object valueNotToMatch) {
        return Assertions.not(valueNotToMatch);
    }



    /**
     * Delegate call to public static org.assertj.core.api.filter.NotInFilter org.assertj.core.api.Assertions.notIn(java.lang.Object...)
     * {@link org.assertj.core.api.Assertions#notIn(java.lang.Object[])}
     */
    default NotInFilter notIn(Object... valuesNotToMatch) {
        return Assertions.notIn(valuesNotToMatch);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Double> org.assertj.core.api.Assertions.offset(java.lang.Double)
     * {@link org.assertj.core.api.Assertions#offset(java.lang.Double)}
     */
    default Offset<Double> offset(Double value) {
        return Assertions.offset(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Float> org.assertj.core.api.Assertions.offset(java.lang.Float)
     * {@link org.assertj.core.api.Assertions#offset(java.lang.Float)}
     */
    default Offset<Float> offset(Float value) {
        return Assertions.offset(value);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.registerCustomDateFormat(java.text.DateFormat)
     * {@link org.assertj.core.api.Assertions#registerCustomDateFormat(java.text.DateFormat)}
     */
    default void registerCustomDateFormat(DateFormat userCustomDateFormat) {
        Assertions.registerCustomDateFormat(userCustomDateFormat);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.registerCustomDateFormat(java.lang.String)
     * {@link org.assertj.core.api.Assertions#registerCustomDateFormat(java.lang.String)}
     */
    default void registerCustomDateFormat(String userCustomDateFormatPattern) {
        Assertions.registerCustomDateFormat(userCustomDateFormatPattern);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.setAllowComparingPrivateFields(boolean)
     * {@link org.assertj.core.api.Assertions#setAllowComparingPrivateFields(boolean)}
     */
    default void setAllowComparingPrivateFields(boolean allowComparingPrivateFields) {
        Assertions.setAllowComparingPrivateFields(allowComparingPrivateFields);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.setAllowExtractingPrivateFields(boolean)
     * {@link org.assertj.core.api.Assertions#setAllowExtractingPrivateFields(boolean)}
     */
    default void setAllowExtractingPrivateFields(boolean allowExtractingPrivateFields) {
        Assertions.setAllowExtractingPrivateFields(allowExtractingPrivateFields);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.setLenientDateParsing(boolean)
     * {@link org.assertj.core.api.Assertions#setLenientDateParsing(boolean)}
     */
    default void setLenientDateParsing(boolean value) {
        Assertions.setLenientDateParsing(value);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.setMaxLengthForSingleLineDescription(int)
     * {@link org.assertj.core.api.Assertions#setMaxLengthForSingleLineDescription(int)}
     */
    default void setMaxLengthForSingleLineDescription(int maxLengthForSingleLineDescription) {
        Assertions.setMaxLengthForSingleLineDescription(maxLengthForSingleLineDescription);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.setRemoveAssertJRelatedElementsFromStackTrace(boolean)
     * {@link org.assertj.core.api.Assertions#setRemoveAssertJRelatedElementsFromStackTrace(boolean)}
     */
    default void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace) {
        Assertions.setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.shouldHaveThrown(java.lang.Class<? extends java.lang.Throwable>)
     * {@link org.assertj.core.api.Assertions#shouldHaveThrown(java.lang.Class)}
     */
    default void shouldHaveThrown(Class<? extends Throwable> exceptionClass) {
        Assertions.shouldHaveThrown(exceptionClass);
    }



    /**
     * Delegate call to public static org.assertj.core.groups.Tuple org.assertj.core.api.Assertions.tuple(java.lang.Object...)
     * {@link org.assertj.core.api.Assertions#tuple(java.lang.Object[])}
     */
    default Tuple tuple(Object... values) {
        return Assertions.tuple(values);
    }



    /**
     * Delegate call to public static void org.assertj.core.api.Assertions.useDefaultDateFormatsOnly()
     * {@link org.assertj.core.api.Assertions#useDefaultDateFormatsOnly()}
     */
    default void useDefaultDateFormatsOnly() {
        Assertions.useDefaultDateFormatsOnly();
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Double> org.assertj.core.api.Assertions.withPrecision(java.lang.Double)
     * {@link org.assertj.core.api.Assertions#withPrecision(java.lang.Double)}
     */
    default Offset<Double> withPrecision(Double value) {
        return Assertions.withPrecision(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Float> org.assertj.core.api.Assertions.withPrecision(java.lang.Float)
     * {@link org.assertj.core.api.Assertions#withPrecision(java.lang.Float)}
     */
    default Offset<Float> withPrecision(Float value) {
        return Assertions.withPrecision(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.math.BigDecimal> org.assertj.core.api.Assertions.within(java.math.BigDecimal)
     * {@link org.assertj.core.api.Assertions#within(java.math.BigDecimal)}
     */
    default Offset<BigDecimal> within(BigDecimal value) {
        return Assertions.within(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Byte> org.assertj.core.api.Assertions.within(java.lang.Byte)
     * {@link org.assertj.core.api.Assertions#within(java.lang.Byte)}
     */
    default Offset<Byte> within(Byte value) {
        return Assertions.within(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Double> org.assertj.core.api.Assertions.within(java.lang.Double)
     * {@link org.assertj.core.api.Assertions#within(java.lang.Double)}
     */
    default Offset<Double> within(Double value) {
        return Assertions.within(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Float> org.assertj.core.api.Assertions.within(java.lang.Float)
     * {@link org.assertj.core.api.Assertions#within(java.lang.Float)}
     */
    default Offset<Float> within(Float value) {
        return Assertions.within(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Integer> org.assertj.core.api.Assertions.within(java.lang.Integer)
     * {@link org.assertj.core.api.Assertions#within(java.lang.Integer)}
     */
    default Offset<Integer> within(Integer value) {
        return Assertions.within(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Long> org.assertj.core.api.Assertions.within(java.lang.Long)
     * {@link org.assertj.core.api.Assertions#within(java.lang.Long)}
     */
    default Offset<Long> within(Long value) {
        return Assertions.within(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Offset<java.lang.Short> org.assertj.core.api.Assertions.within(java.lang.Short)
     * {@link org.assertj.core.api.Assertions#within(java.lang.Short)}
     */
    default Offset<Short> within(Short value) {
        return Assertions.within(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Percentage org.assertj.core.api.Assertions.withinPercentage(java.lang.Double)
     * {@link org.assertj.core.api.Assertions#withinPercentage(java.lang.Double)}
     */
    default Percentage withinPercentage(Double value) {
        return Assertions.withinPercentage(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Percentage org.assertj.core.api.Assertions.withinPercentage(java.lang.Integer)
     * {@link org.assertj.core.api.Assertions#withinPercentage(java.lang.Integer)}
     */
    default Percentage withinPercentage(Integer value) {
        return Assertions.withinPercentage(value);
    }



    /**
     * Delegate call to public static org.assertj.core.data.Percentage org.assertj.core.api.Assertions.withinPercentage(java.lang.Long)
     * {@link org.assertj.core.api.Assertions#withinPercentage(java.lang.Long)}
     */
    default Percentage withinPercentage(Long value) {
        return Assertions.withinPercentage(value);
    }



}