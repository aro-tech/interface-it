package com.github.aro_tech.interface_it.util.mixin;

import com.google.common.base.Optional; 
import com.google.common.collect.Multimap; 
import com.google.common.collect.Range; 
import com.google.common.collect.RangeMap; 
import com.google.common.collect.Table; 
import com.google.common.io.ByteSource; 
import org.assertj.core.data.MapEntry; 
import org.assertj.guava.api.Assertions; 
import org.assertj.guava.api.ByteSourceAssert; 
import org.assertj.guava.api.MultimapAssert; 
import org.assertj.guava.api.OptionalAssert; 
import org.assertj.guava.api.RangeAssert; 
import org.assertj.guava.api.RangeMapAssert; 
import org.assertj.guava.api.TableAssert; 

/** 
 * Wrapper of static elements in org.assertj.guava.api.Assertions
 * Generated by Interface-It: https://github.com/aro-tech/interface-it
 * {@link org.assertj.guava.api.Assertions}
 */
public interface AssertJGuavaMixin {


    // CONSTANTS: 


    // DELEGATE METHODS: 

    /**
     * Delegate call to public static org.assertj.guava.api.ByteSourceAssert org.assertj.guava.api.Assertions.assertThat(com.google.common.io.ByteSource)
     * {@link org.assertj.guava.api.Assertions#assertThat(com.google.common.io.ByteSource)}
     */
    default ByteSourceAssert assertThat(ByteSource actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <K,V> org.assertj.guava.api.MultimapAssert<K, V> org.assertj.guava.api.Assertions.assertThat(com.google.common.collect.Multimap<K, V>)
     * {@link org.assertj.guava.api.Assertions#assertThat(com.google.common.collect.Multimap)}
     */
    default <K,V> MultimapAssert<K, V> assertThat(Multimap<K, V> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.guava.api.OptionalAssert<T> org.assertj.guava.api.Assertions.assertThat(com.google.common.base.Optional<T>)
     * {@link org.assertj.guava.api.Assertions#assertThat(com.google.common.base.Optional)}
     */
    default <T> OptionalAssert<T> assertThat(Optional<T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <T> org.assertj.guava.api.RangeAssert<T> org.assertj.guava.api.Assertions.assertThat(com.google.common.collect.Range<T>)
     * {@link org.assertj.guava.api.Assertions#assertThat(com.google.common.collect.Range)}
     */
    default <T extends Comparable<T>> RangeAssert<T> assertThat(Range<T> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <K,V> org.assertj.guava.api.RangeMapAssert<K, V> org.assertj.guava.api.Assertions.assertThat(com.google.common.collect.RangeMap<K, V>)
     * {@link org.assertj.guava.api.Assertions#assertThat(com.google.common.collect.RangeMap)}
     */
    default <K extends Comparable<K>,V> RangeMapAssert<K, V> assertThat(RangeMap<K, V> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <R,C,V> org.assertj.guava.api.TableAssert<R, C, V> org.assertj.guava.api.Assertions.assertThat(com.google.common.collect.Table<R, C, V>)
     * {@link org.assertj.guava.api.Assertions#assertThat(com.google.common.collect.Table)}
     */
    default <R,C,V> TableAssert<R, C, V> assertThat(Table<R, C, V> actual) {
        return Assertions.assertThat(actual);
    }



    /**
     * Delegate call to public static <K,V> org.assertj.core.data.MapEntry<K, V> org.assertj.guava.api.Assertions.entry(K,V)
     * {@link org.assertj.guava.api.Assertions#entry(java.lang.Object,java.lang.Object)}
     */
    default <K,V> MapEntry<K, V> entry(K key, V value) {
        return Assertions.entry(key, value);
    }



}