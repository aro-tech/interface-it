package com.github.aro_tech.interface_it.util.mixin;

import java.io.File; 
import java.io.IOException; 
import java.io.InputStream; 
import java.net.URL; 
import org.jsoup.Connection; 
import org.jsoup.Jsoup; 
import org.jsoup.nodes.Document; 
import org.jsoup.parser.Parser; 
import org.jsoup.safety.Whitelist; 

/** 
 * Wrapper of static elements in org.jsoup.Jsoup
 * Generated by Interface-It: https://github.com/aro-tech/interface-it
 * {@link org.jsoup.Jsoup}
 */
public interface JSoupMixin {


    // CONSTANTS: 


    // DELEGATE METHODS: 

    /**
     * Delegate call to public static java.lang.String org.jsoup.Jsoup.clean(java.lang.String,org.jsoup.safety.Whitelist)
     * {@link org.jsoup.Jsoup#clean(java.lang.String,org.jsoup.safety.Whitelist)}
     */
    default String clean(String bodyHtml, Whitelist whitelist) {
        return Jsoup.clean(bodyHtml, whitelist);
    }



    /**
     * Delegate call to public static java.lang.String org.jsoup.Jsoup.clean(java.lang.String,java.lang.String,org.jsoup.safety.Whitelist)
     * {@link org.jsoup.Jsoup#clean(java.lang.String,java.lang.String,org.jsoup.safety.Whitelist)}
     */
    default String clean(String bodyHtml, String baseUri, Whitelist whitelist) {
        return Jsoup.clean(bodyHtml, baseUri, whitelist);
    }



    /**
     * Delegate call to public static java.lang.String org.jsoup.Jsoup.clean(java.lang.String,java.lang.String,org.jsoup.safety.Whitelist,org.jsoup.nodes.Document$OutputSettings)
     * {@link org.jsoup.Jsoup#clean(java.lang.String,java.lang.String,org.jsoup.safety.Whitelist,org.jsoup.nodes.Document$OutputSettings)}
     */
    default String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) {
        return Jsoup.clean(bodyHtml, baseUri, whitelist, outputSettings);
    }



    /**
     * Delegate call to public static org.jsoup.Connection org.jsoup.Jsoup.connect(java.lang.String)
     * {@link org.jsoup.Jsoup#connect(java.lang.String)}
     */
    default Connection connect(String url) {
        return Jsoup.connect(url);
    }



    /**
     * Delegate call to public static boolean org.jsoup.Jsoup.isValid(java.lang.String,org.jsoup.safety.Whitelist)
     * {@link org.jsoup.Jsoup#isValid(java.lang.String,org.jsoup.safety.Whitelist)}
     */
    default boolean isValid(String bodyHtml, Whitelist whitelist) {
        return Jsoup.isValid(bodyHtml, whitelist);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.lang.String)
     * {@link org.jsoup.Jsoup#parse(java.lang.String)}
     */
    default Document parse(String html) {
        return Jsoup.parse(html);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.io.File,java.lang.String) throws java.io.IOException
     * {@link org.jsoup.Jsoup#parse(java.io.File,java.lang.String)}
     */
    default Document parse(File in, String charsetName) throws IOException {
        return Jsoup.parse(in, charsetName);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.lang.String,java.lang.String)
     * {@link org.jsoup.Jsoup#parse(java.lang.String,java.lang.String)}
     */
    default Document parse(String html, String charsetName) {
        return Jsoup.parse(html, charsetName);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.net.URL,int) throws java.io.IOException
     * {@link org.jsoup.Jsoup#parse(java.net.URL,int)}
     */
    default Document parse(URL url, int timeoutMillis) throws IOException {
        return Jsoup.parse(url, timeoutMillis);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.io.File,java.lang.String,java.lang.String) throws java.io.IOException
     * {@link org.jsoup.Jsoup#parse(java.io.File,java.lang.String,java.lang.String)}
     */
    default Document parse(File in, String charsetName, String baseUri) throws IOException {
        return Jsoup.parse(in, charsetName, baseUri);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.io.InputStream,java.lang.String,java.lang.String) throws java.io.IOException
     * {@link org.jsoup.Jsoup#parse(java.io.InputStream,java.lang.String,java.lang.String)}
     */
    default Document parse(InputStream in, String charsetName, String baseUri) throws IOException {
        return Jsoup.parse(in, charsetName, baseUri);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.lang.String,java.lang.String,org.jsoup.parser.Parser)
     * {@link org.jsoup.Jsoup#parse(java.lang.String,java.lang.String,org.jsoup.parser.Parser)}
     */
    default Document parse(String html, String charsetName, Parser parser) {
        return Jsoup.parse(html, charsetName, parser);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parse(java.io.InputStream,java.lang.String,java.lang.String,org.jsoup.parser.Parser) throws java.io.IOException
     * {@link org.jsoup.Jsoup#parse(java.io.InputStream,java.lang.String,java.lang.String,org.jsoup.parser.Parser)}
     */
    default Document parse(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
        return Jsoup.parse(in, charsetName, baseUri, parser);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parseBodyFragment(java.lang.String)
     * {@link org.jsoup.Jsoup#parseBodyFragment(java.lang.String)}
     */
    default Document parseBodyFragment(String bodyHtml) {
        return Jsoup.parseBodyFragment(bodyHtml);
    }



    /**
     * Delegate call to public static org.jsoup.nodes.Document org.jsoup.Jsoup.parseBodyFragment(java.lang.String,java.lang.String)
     * {@link org.jsoup.Jsoup#parseBodyFragment(java.lang.String,java.lang.String)}
     */
    default Document parseBodyFragment(String bodyHtml, String baseUri) {
        return Jsoup.parseBodyFragment(bodyHtml, baseUri);
    }



}