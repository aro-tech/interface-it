package com.github.aro_tech.interface_it.util.mixin;

import com.jayway.awaitility.Awaitility; 
import com.jayway.awaitility.Duration; 
import com.jayway.awaitility.core.ConditionEvaluationListener; 
import com.jayway.awaitility.core.ConditionFactory; 
import com.jayway.awaitility.core.FieldSupplierBuilder; 
import com.jayway.awaitility.core.Predicate; 
import com.jayway.awaitility.core.ThrowingRunnable; 
import com.jayway.awaitility.pollinterval.PollInterval; 
import java.util.concurrent.TimeUnit; 
import org.hamcrest.Matcher; 

/** 
 * Wrapper of static elements in com.jayway.awaitility.Awaitility
 * Generated by Interface-It: https://github.com/aro-tech/interface-it
 * {@link com.jayway.awaitility.Awaitility}
 */
public interface AwaitilityMixin {


    // CONSTANTS: 


    // DELEGATE METHODS: 

    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.await()
     * {@link com.jayway.awaitility.Awaitility#await()}
     */
    default ConditionFactory await() {
        return Awaitility.await();
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.await(java.lang.String)
     * {@link com.jayway.awaitility.Awaitility#await(java.lang.String)}
     */
    default ConditionFactory await(String alias) {
        return Awaitility.await(alias);
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.catchUncaughtExceptions()
     * {@link com.jayway.awaitility.Awaitility#catchUncaughtExceptions()}
     */
    default ConditionFactory catchUncaughtExceptions() {
        return Awaitility.catchUncaughtExceptions();
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.catchUncaughtExceptionsByDefault()
     * {@link com.jayway.awaitility.Awaitility#catchUncaughtExceptionsByDefault()}
     */
    default void catchUncaughtExceptionsByDefault() {
        Awaitility.catchUncaughtExceptionsByDefault();
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.doNotCatchUncaughtExceptionsByDefault()
     * {@link com.jayway.awaitility.Awaitility#doNotCatchUncaughtExceptionsByDefault()}
     */
    default void doNotCatchUncaughtExceptionsByDefault() {
        Awaitility.doNotCatchUncaughtExceptionsByDefault();
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.dontCatchUncaughtExceptions()
     * {@link com.jayway.awaitility.Awaitility#dontCatchUncaughtExceptions()}
     */
    default ConditionFactory dontCatchUncaughtExceptions() {
        return Awaitility.dontCatchUncaughtExceptions();
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.FieldSupplierBuilder com.jayway.awaitility.Awaitility.fieldIn(java.lang.Class<?>)
     * {@link com.jayway.awaitility.Awaitility#fieldIn(java.lang.Class)}
     */
    default FieldSupplierBuilder fieldIn(Class<?> clazz) {
        return Awaitility.fieldIn(clazz);
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.FieldSupplierBuilder com.jayway.awaitility.Awaitility.fieldIn(java.lang.Object)
     * {@link com.jayway.awaitility.Awaitility#fieldIn(java.lang.Object)}
     */
    default FieldSupplierBuilder fieldIn(Object object) {
        return Awaitility.fieldIn(object);
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.given()
     * {@link com.jayway.awaitility.Awaitility#given()}
     */
    default ConditionFactory given() {
        return Awaitility.given();
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.ignoreExceptionByDefault(java.lang.Class<? extends java.lang.Exception>)
     * {@link com.jayway.awaitility.Awaitility#ignoreExceptionByDefault(java.lang.Class)}
     */
    default void ignoreExceptionByDefault(Class<? extends Exception> exceptionType) {
        Awaitility.ignoreExceptionByDefault(exceptionType);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.ignoreExceptionsByDefault()
     * {@link com.jayway.awaitility.Awaitility#ignoreExceptionsByDefault()}
     */
    default void ignoreExceptionsByDefault() {
        Awaitility.ignoreExceptionsByDefault();
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.ignoreExceptionsByDefaultMatching(org.hamcrest.Matcher<? super java.lang.Exception>)
     * {@link com.jayway.awaitility.Awaitility#ignoreExceptionsByDefaultMatching(org.hamcrest.Matcher)}
     */
    default void ignoreExceptionsByDefaultMatching(Matcher<? super Exception> matcher) {
        Awaitility.ignoreExceptionsByDefaultMatching(matcher);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.ignoreExceptionsByDefaultMatching(com.jayway.awaitility.core.Predicate<java.lang.Exception>)
     * {@link com.jayway.awaitility.Awaitility#ignoreExceptionsByDefaultMatching(com.jayway.awaitility.core.Predicate)}
     */
    default void ignoreExceptionsByDefaultMatching(Predicate<Exception> predicate) {
        Awaitility.ignoreExceptionsByDefaultMatching(predicate);
    }



    /**
     * Delegate call to public static java.lang.Runnable com.jayway.awaitility.Awaitility.matches(com.jayway.awaitility.core.ThrowingRunnable)
     * {@link com.jayway.awaitility.Awaitility#matches(com.jayway.awaitility.core.ThrowingRunnable)}
     */
    default Runnable matches(ThrowingRunnable throwingRunnable) {
        return Awaitility.matches(throwingRunnable);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.reset()
     * {@link com.jayway.awaitility.Awaitility#reset()}
     */
    default void reset() {
        Awaitility.reset();
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultConditionEvaluationListener(com.jayway.awaitility.core.ConditionEvaluationListener)
     * {@link com.jayway.awaitility.Awaitility#setDefaultConditionEvaluationListener(com.jayway.awaitility.core.ConditionEvaluationListener)}
     */
    default void setDefaultConditionEvaluationListener(ConditionEvaluationListener defaultConditionEvaluationListener) {
        Awaitility.setDefaultConditionEvaluationListener(defaultConditionEvaluationListener);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultPollDelay(com.jayway.awaitility.Duration)
     * {@link com.jayway.awaitility.Awaitility#setDefaultPollDelay(com.jayway.awaitility.Duration)}
     */
    default void setDefaultPollDelay(Duration pollDelay) {
        Awaitility.setDefaultPollDelay(pollDelay);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultPollDelay(long,java.util.concurrent.TimeUnit)
     * {@link com.jayway.awaitility.Awaitility#setDefaultPollDelay(long,java.util.concurrent.TimeUnit)}
     */
    default void setDefaultPollDelay(long pollDelay, TimeUnit unit) {
        Awaitility.setDefaultPollDelay(pollDelay, unit);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultPollInterval(com.jayway.awaitility.Duration)
     * {@link com.jayway.awaitility.Awaitility#setDefaultPollInterval(com.jayway.awaitility.Duration)}
     */
    default void setDefaultPollInterval(Duration pollInterval) {
        Awaitility.setDefaultPollInterval(pollInterval);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultPollInterval(com.jayway.awaitility.pollinterval.PollInterval)
     * {@link com.jayway.awaitility.Awaitility#setDefaultPollInterval(com.jayway.awaitility.pollinterval.PollInterval)}
     */
    default void setDefaultPollInterval(PollInterval pollInterval) {
        Awaitility.setDefaultPollInterval(pollInterval);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultPollInterval(long,java.util.concurrent.TimeUnit)
     * {@link com.jayway.awaitility.Awaitility#setDefaultPollInterval(long,java.util.concurrent.TimeUnit)}
     */
    default void setDefaultPollInterval(long pollInterval, TimeUnit unit) {
        Awaitility.setDefaultPollInterval(pollInterval, unit);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultTimeout(com.jayway.awaitility.Duration)
     * {@link com.jayway.awaitility.Awaitility#setDefaultTimeout(com.jayway.awaitility.Duration)}
     */
    default void setDefaultTimeout(Duration defaultTimeout) {
        Awaitility.setDefaultTimeout(defaultTimeout);
    }



    /**
     * Delegate call to public static void com.jayway.awaitility.Awaitility.setDefaultTimeout(long,java.util.concurrent.TimeUnit)
     * {@link com.jayway.awaitility.Awaitility#setDefaultTimeout(long,java.util.concurrent.TimeUnit)}
     */
    default void setDefaultTimeout(long timeout, TimeUnit unit) {
        Awaitility.setDefaultTimeout(timeout, unit);
    }



    /**
     * Delegate call to public static <S> S com.jayway.awaitility.Awaitility.to(S)
     * {@link com.jayway.awaitility.Awaitility#to(java.lang.Object)}
     */
    default <S> S to(S object) {
        return Awaitility.to(object);
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.waitAtMost(com.jayway.awaitility.Duration)
     * {@link com.jayway.awaitility.Awaitility#waitAtMost(com.jayway.awaitility.Duration)}
     */
    default ConditionFactory waitAtMost(Duration timeout) {
        return Awaitility.waitAtMost(timeout);
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.waitAtMost(long,java.util.concurrent.TimeUnit)
     * {@link com.jayway.awaitility.Awaitility#waitAtMost(long,java.util.concurrent.TimeUnit)}
     */
    default ConditionFactory waitAtMost(long value, TimeUnit unit) {
        return Awaitility.waitAtMost(value, unit);
    }



    /**
     * Delegate call to public static com.jayway.awaitility.core.ConditionFactory com.jayway.awaitility.Awaitility.with()
     * {@link com.jayway.awaitility.Awaitility#with()}
     */
    default ConditionFactory with() {
        return Awaitility.with();
    }



}