package com.github.aro_tech.interface_it.util.mixin;


/** 
 * Wrapper of static elements in java.lang.Math
 * Generated by Interface-It: https://github.com/aro-tech/interface-it
 * {@link java.lang.Math}
 */
public interface Math {


    // CONSTANTS: 

    /** {@link java.lang.Math#E} */
    static final double E = java.lang.Math.E;

    /** {@link java.lang.Math#PI} */
    static final double PI = java.lang.Math.PI;


    // DELEGATE METHODS: 

    /**
     * Delegate call to public static double java.lang.Math.IEEEremainder(double,double)
     * {@link java.lang.Math#IEEEremainder(double,double)}
     */
    default double IEEEremainder(double f1, double f2) {
        return java.lang.Math.IEEEremainder(f1, f2);
    }



    /**
     * Delegate call to public static double java.lang.Math.abs(double)
     * {@link java.lang.Math#abs(double)}
     */
    default double abs(double a) {
        return java.lang.Math.abs(a);
    }



    /**
     * Delegate call to public static float java.lang.Math.abs(float)
     * {@link java.lang.Math#abs(float)}
     */
    default float abs(float a) {
        return java.lang.Math.abs(a);
    }



    /**
     * Delegate call to public static int java.lang.Math.abs(int)
     * {@link java.lang.Math#abs(int)}
     */
    default int abs(int a) {
        return java.lang.Math.abs(a);
    }



    /**
     * Delegate call to public static long java.lang.Math.abs(long)
     * {@link java.lang.Math#abs(long)}
     */
    default long abs(long a) {
        return java.lang.Math.abs(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.acos(double)
     * {@link java.lang.Math#acos(double)}
     */
    default double acos(double a) {
        return java.lang.Math.acos(a);
    }



    /**
     * Delegate call to public static int java.lang.Math.addExact(int,int)
     * {@link java.lang.Math#addExact(int,int)}
     */
    default int addExact(int arg0, int arg1) {
        return java.lang.Math.addExact(arg0, arg1);
    }



    /**
     * Delegate call to public static long java.lang.Math.addExact(long,long)
     * {@link java.lang.Math#addExact(long,long)}
     */
    default long addExact(long x, long y) {
        return java.lang.Math.addExact(x, y);
    }



    /**
     * Delegate call to public static double java.lang.Math.asin(double)
     * {@link java.lang.Math#asin(double)}
     */
    default double asin(double a) {
        return java.lang.Math.asin(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.atan(double)
     * {@link java.lang.Math#atan(double)}
     */
    default double atan(double a) {
        return java.lang.Math.atan(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.atan2(double,double)
     * {@link java.lang.Math#atan2(double,double)}
     */
    default double atan2(double y, double x) {
        return java.lang.Math.atan2(y, x);
    }



    /**
     * Delegate call to public static double java.lang.Math.cbrt(double)
     * {@link java.lang.Math#cbrt(double)}
     */
    default double cbrt(double a) {
        return java.lang.Math.cbrt(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.ceil(double)
     * {@link java.lang.Math#ceil(double)}
     */
    default double ceil(double a) {
        return java.lang.Math.ceil(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.copySign(double,double)
     * {@link java.lang.Math#copySign(double,double)}
     */
    default double copySign(double magnitude, double sign) {
        return java.lang.Math.copySign(magnitude, sign);
    }



    /**
     * Delegate call to public static float java.lang.Math.copySign(float,float)
     * {@link java.lang.Math#copySign(float,float)}
     */
    default float copySign(float arg0, float arg1) {
        return java.lang.Math.copySign(arg0, arg1);
    }



    /**
     * Delegate call to public static double java.lang.Math.cos(double)
     * {@link java.lang.Math#cos(double)}
     */
    default double cos(double a) {
        return java.lang.Math.cos(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.cosh(double)
     * {@link java.lang.Math#cosh(double)}
     */
    default double cosh(double x) {
        return java.lang.Math.cosh(x);
    }



    /**
     * Delegate call to public static int java.lang.Math.decrementExact(int)
     * {@link java.lang.Math#decrementExact(int)}
     */
    default int decrementExact(int a) {
        return java.lang.Math.decrementExact(a);
    }



    /**
     * Delegate call to public static long java.lang.Math.decrementExact(long)
     * {@link java.lang.Math#decrementExact(long)}
     */
    default long decrementExact(long a) {
        return java.lang.Math.decrementExact(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.exp(double)
     * {@link java.lang.Math#exp(double)}
     */
    default double exp(double a) {
        return java.lang.Math.exp(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.expm1(double)
     * {@link java.lang.Math#expm1(double)}
     */
    default double expm1(double x) {
        return java.lang.Math.expm1(x);
    }



    /**
     * Delegate call to public static double java.lang.Math.floor(double)
     * {@link java.lang.Math#floor(double)}
     */
    default double floor(double a) {
        return java.lang.Math.floor(a);
    }



    /**
     * Delegate call to public static int java.lang.Math.floorDiv(int,int)
     * {@link java.lang.Math#floorDiv(int,int)}
     */
    default int floorDiv(int x, int y) {
        return java.lang.Math.floorDiv(x, y);
    }



    /**
     * Delegate call to public static long java.lang.Math.floorDiv(long,long)
     * {@link java.lang.Math#floorDiv(long,long)}
     */
    default long floorDiv(long x, long y) {
        return java.lang.Math.floorDiv(x, y);
    }



    /**
     * Delegate call to public static int java.lang.Math.floorMod(int,int)
     * {@link java.lang.Math#floorMod(int,int)}
     */
    default int floorMod(int x, int y) {
        return java.lang.Math.floorMod(x, y);
    }



    /**
     * Delegate call to public static long java.lang.Math.floorMod(long,long)
     * {@link java.lang.Math#floorMod(long,long)}
     */
    default long floorMod(long x, long y) {
        return java.lang.Math.floorMod(x, y);
    }



    /**
     * Delegate call to public static int java.lang.Math.getExponent(double)
     * {@link java.lang.Math#getExponent(double)}
     */
    default int getExponent(double d) {
        return java.lang.Math.getExponent(d);
    }



    /**
     * Delegate call to public static int java.lang.Math.getExponent(float)
     * {@link java.lang.Math#getExponent(float)}
     */
    default int getExponent(float f) {
        return java.lang.Math.getExponent(f);
    }



    /**
     * Delegate call to public static double java.lang.Math.hypot(double,double)
     * {@link java.lang.Math#hypot(double,double)}
     */
    default double hypot(double x, double y) {
        return java.lang.Math.hypot(x, y);
    }



    /**
     * Delegate call to public static int java.lang.Math.incrementExact(int)
     * {@link java.lang.Math#incrementExact(int)}
     */
    default int incrementExact(int a) {
        return java.lang.Math.incrementExact(a);
    }



    /**
     * Delegate call to public static long java.lang.Math.incrementExact(long)
     * {@link java.lang.Math#incrementExact(long)}
     */
    default long incrementExact(long a) {
        return java.lang.Math.incrementExact(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.log(double)
     * {@link java.lang.Math#log(double)}
     */
    default double log(double a) {
        return java.lang.Math.log(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.log10(double)
     * {@link java.lang.Math#log10(double)}
     */
    default double log10(double a) {
        return java.lang.Math.log10(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.log1p(double)
     * {@link java.lang.Math#log1p(double)}
     */
    default double log1p(double x) {
        return java.lang.Math.log1p(x);
    }



    /**
     * Delegate call to public static double java.lang.Math.max(double,double)
     * {@link java.lang.Math#max(double,double)}
     */
    default double max(double a, double b) {
        return java.lang.Math.max(a, b);
    }



    /**
     * Delegate call to public static float java.lang.Math.max(float,float)
     * {@link java.lang.Math#max(float,float)}
     */
    default float max(float a, float b) {
        return java.lang.Math.max(a, b);
    }



    /**
     * Delegate call to public static int java.lang.Math.max(int,int)
     * {@link java.lang.Math#max(int,int)}
     */
    default int max(int a, int b) {
        return java.lang.Math.max(a, b);
    }



    /**
     * Delegate call to public static long java.lang.Math.max(long,long)
     * {@link java.lang.Math#max(long,long)}
     */
    default long max(long a, long b) {
        return java.lang.Math.max(a, b);
    }



    /**
     * Delegate call to public static double java.lang.Math.min(double,double)
     * {@link java.lang.Math#min(double,double)}
     */
    default double min(double a, double b) {
        return java.lang.Math.min(a, b);
    }



    /**
     * Delegate call to public static float java.lang.Math.min(float,float)
     * {@link java.lang.Math#min(float,float)}
     */
    default float min(float a, float b) {
        return java.lang.Math.min(a, b);
    }



    /**
     * Delegate call to public static int java.lang.Math.min(int,int)
     * {@link java.lang.Math#min(int,int)}
     */
    default int min(int a, int b) {
        return java.lang.Math.min(a, b);
    }



    /**
     * Delegate call to public static long java.lang.Math.min(long,long)
     * {@link java.lang.Math#min(long,long)}
     */
    default long min(long a, long b) {
        return java.lang.Math.min(a, b);
    }



    /**
     * Delegate call to public static int java.lang.Math.multiplyExact(int,int)
     * {@link java.lang.Math#multiplyExact(int,int)}
     */
    default int multiplyExact(int x, int y) {
        return java.lang.Math.multiplyExact(x, y);
    }



    /**
     * Delegate call to public static long java.lang.Math.multiplyExact(long,long)
     * {@link java.lang.Math#multiplyExact(long,long)}
     */
    default long multiplyExact(long x, long y) {
        return java.lang.Math.multiplyExact(x, y);
    }



    /**
     * Delegate call to public static int java.lang.Math.negateExact(int)
     * {@link java.lang.Math#negateExact(int)}
     */
    default int negateExact(int a) {
        return java.lang.Math.negateExact(a);
    }



    /**
     * Delegate call to public static long java.lang.Math.negateExact(long)
     * {@link java.lang.Math#negateExact(long)}
     */
    default long negateExact(long a) {
        return java.lang.Math.negateExact(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.nextAfter(double,double)
     * {@link java.lang.Math#nextAfter(double,double)}
     */
    default double nextAfter(double start, double direction) {
        return java.lang.Math.nextAfter(start, direction);
    }



    /**
     * Delegate call to public static float java.lang.Math.nextAfter(float,double)
     * {@link java.lang.Math#nextAfter(float,double)}
     */
    default float nextAfter(float start, double direction) {
        return java.lang.Math.nextAfter(start, direction);
    }



    /**
     * Delegate call to public static double java.lang.Math.nextDown(double)
     * {@link java.lang.Math#nextDown(double)}
     */
    default double nextDown(double d) {
        return java.lang.Math.nextDown(d);
    }



    /**
     * Delegate call to public static float java.lang.Math.nextDown(float)
     * {@link java.lang.Math#nextDown(float)}
     */
    default float nextDown(float f) {
        return java.lang.Math.nextDown(f);
    }



    /**
     * Delegate call to public static double java.lang.Math.nextUp(double)
     * {@link java.lang.Math#nextUp(double)}
     */
    default double nextUp(double d) {
        return java.lang.Math.nextUp(d);
    }



    /**
     * Delegate call to public static float java.lang.Math.nextUp(float)
     * {@link java.lang.Math#nextUp(float)}
     */
    default float nextUp(float f) {
        return java.lang.Math.nextUp(f);
    }



    /**
     * Delegate call to public static double java.lang.Math.pow(double,double)
     * {@link java.lang.Math#pow(double,double)}
     */
    default double pow(double a, double b) {
        return java.lang.Math.pow(a, b);
    }



    /**
     * Delegate call to public static double java.lang.Math.random()
     * {@link java.lang.Math#random()}
     */
    default double random() {
        return java.lang.Math.random();
    }



    /**
     * Delegate call to public static double java.lang.Math.rint(double)
     * {@link java.lang.Math#rint(double)}
     */
    default double rint(double a) {
        return java.lang.Math.rint(a);
    }



    /**
     * Delegate call to public static long java.lang.Math.round(double)
     * {@link java.lang.Math#round(double)}
     */
    default long round(double a) {
        return java.lang.Math.round(a);
    }



    /**
     * Delegate call to public static int java.lang.Math.round(float)
     * {@link java.lang.Math#round(float)}
     */
    default int round(float a) {
        return java.lang.Math.round(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.scalb(double,int)
     * {@link java.lang.Math#scalb(double,int)}
     */
    default double scalb(double d, int scaleFactor) {
        return java.lang.Math.scalb(d, scaleFactor);
    }



    /**
     * Delegate call to public static float java.lang.Math.scalb(float,int)
     * {@link java.lang.Math#scalb(float,int)}
     */
    default float scalb(float f, int scaleFactor) {
        return java.lang.Math.scalb(f, scaleFactor);
    }



    /**
     * Delegate call to public static double java.lang.Math.signum(double)
     * {@link java.lang.Math#signum(double)}
     */
    default double signum(double d) {
        return java.lang.Math.signum(d);
    }



    /**
     * Delegate call to public static float java.lang.Math.signum(float)
     * {@link java.lang.Math#signum(float)}
     */
    default float signum(float f) {
        return java.lang.Math.signum(f);
    }



    /**
     * Delegate call to public static double java.lang.Math.sin(double)
     * {@link java.lang.Math#sin(double)}
     */
    default double sin(double a) {
        return java.lang.Math.sin(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.sinh(double)
     * {@link java.lang.Math#sinh(double)}
     */
    default double sinh(double x) {
        return java.lang.Math.sinh(x);
    }



    /**
     * Delegate call to public static double java.lang.Math.sqrt(double)
     * {@link java.lang.Math#sqrt(double)}
     */
    default double sqrt(double a) {
        return java.lang.Math.sqrt(a);
    }



    /**
     * Delegate call to public static int java.lang.Math.subtractExact(int,int)
     * {@link java.lang.Math#subtractExact(int,int)}
     */
    default int subtractExact(int x, int y) {
        return java.lang.Math.subtractExact(x, y);
    }



    /**
     * Delegate call to public static long java.lang.Math.subtractExact(long,long)
     * {@link java.lang.Math#subtractExact(long,long)}
     */
    default long subtractExact(long x, long y) {
        return java.lang.Math.subtractExact(x, y);
    }



    /**
     * Delegate call to public static double java.lang.Math.tan(double)
     * {@link java.lang.Math#tan(double)}
     */
    default double tan(double a) {
        return java.lang.Math.tan(a);
    }



    /**
     * Delegate call to public static double java.lang.Math.tanh(double)
     * {@link java.lang.Math#tanh(double)}
     */
    default double tanh(double x) {
        return java.lang.Math.tanh(x);
    }



    /**
     * Delegate call to public static double java.lang.Math.toDegrees(double)
     * {@link java.lang.Math#toDegrees(double)}
     */
    default double toDegrees(double angrad) {
        return java.lang.Math.toDegrees(angrad);
    }



    /**
     * Delegate call to public static int java.lang.Math.toIntExact(long)
     * {@link java.lang.Math#toIntExact(long)}
     */
    default int toIntExact(long value) {
        return java.lang.Math.toIntExact(value);
    }



    /**
     * Delegate call to public static double java.lang.Math.toRadians(double)
     * {@link java.lang.Math#toRadians(double)}
     */
    default double toRadians(double angdeg) {
        return java.lang.Math.toRadians(angdeg);
    }



    /**
     * Delegate call to public static double java.lang.Math.ulp(double)
     * {@link java.lang.Math#ulp(double)}
     */
    default double ulp(double d) {
        return java.lang.Math.ulp(d);
    }



    /**
     * Delegate call to public static float java.lang.Math.ulp(float)
     * {@link java.lang.Math#ulp(float)}
     */
    default float ulp(float f) {
        return java.lang.Math.ulp(f);
    }



}