// from URLEncoder
@Deprecated
public static String encode(String stringToEncode) {}

public static String encode(String stringToEncode,
            String characterEncoding)
                     throws UnsupportedEncodingException {}
 
 // from JUnit Assert                                       
    public static void assertTrue(String message, boolean condition) {
    public static void assertTrue(boolean condition) {
    public static void assertFalse(String message, boolean condition) {
    public static void assertFalse(boolean condition) {
    public static void fail(String message) {
    public static void fail() {
    public static void assertEquals(String message, Object expected,
            Object actual) {
    public static void assertEquals(Object expected, Object actual) {
    public static void assertNotEquals(String message, Object unexpected,
            Object actual) {
    public static void assertNotEquals(Object unexpected, Object actual) {
    public static void assertNotEquals(String message, long unexpected, long actual) {
    public static void assertNotEquals(long unexpected, long actual) {
    public static void assertNotEquals(String message, double unexpected,
            double actual, double delta) {
    public static void assertNotEquals(double unexpected, double actual, double delta) {
    public static void assertNotEquals(float unexpected, float actual, float delta) {
    public static void assertArrayEquals(String message, Object[] expecteds,
            Object[] actuals) throws ArrayComparisonFailure {
    public static void assertArrayEquals(Object[] expecteds, Object[] actuals) {
    public static void assertArrayEquals(String message, boolean[] expecteds,
            boolean[] actuals) throws ArrayComparisonFailure {
    public static void assertArrayEquals(boolean[] expecteds, boolean[] actuals) {
    public static void assertArrayEquals(String message, byte[] expecteds,
            byte[] actuals) throws ArrayComparisonFailure {
    public static void assertArrayEquals(byte[] expecteds, byte[] actuals) {
    public static void assertArrayEquals(String message, char[] expecteds,
            char[] actuals) throws ArrayComparisonFailure {
    public static void assertArrayEquals(char[] expecteds, char[] actuals) {
    public static void assertArrayEquals(String message, short[] expecteds,
            short[] actuals) throws ArrayComparisonFailure {
    public static void assertArrayEquals(short[] expecteds, short[] actuals) {
    public static void assertArrayEquals(String message, int[] expecteds,
            int[] actuals) throws ArrayComparisonFailure {
    public static void assertArrayEquals(int[] expecteds, int[] actuals) {
    public static void assertArrayEquals(String message, long[] expecteds,
            long[] actuals) throws ArrayComparisonFailure {
    public static void assertArrayEquals(long[] expecteds, long[] actuals) {
    public static void assertArrayEquals(String message, double[] expecteds,
            double[] actuals, double delta) throws ArrayComparisonFailure {
    public static void assertArrayEquals(double[] expecteds, double[] actuals, double delta) {
    public static void assertArrayEquals(String message, float[] expecteds,
            float[] actuals, float delta) throws ArrayComparisonFailure {
    public static void assertArrayEquals(float[] expecteds, float[] actuals, float delta) {
    public static void assertEquals(String message, double expected,
            double actual, double delta) {
    public static void assertEquals(String message, float expected,
            float actual, float delta) {
    public static void assertNotEquals(String message, float unexpected,
            float actual, float delta) {
    public static void assertEquals(long expected, long actual) {
    public static void assertEquals(String message, long expected, long actual) {
    @Deprecated
    public static void assertEquals(double expected, double actual) {
    @Deprecated
    public static void assertEquals(String message, double expected,
            double actual) {
    public static void assertEquals(double expected, double actual, double delta) {
    public static void assertEquals(float expected, float actual, float delta) {
    public static void assertNotNull(String message, Object object) {
    public static void assertNotNull(Object object) {
    public static void assertNull(String message, Object object) {
    public static void assertNull(Object object) {
    public static void assertSame(String message, Object expected, Object actual) {
    public static void assertSame(Object expected, Object actual) {     
    public static void assertNotSame(String message, Object unexpected,
            Object actual) {
    public static void assertNotSame(Object unexpected, Object actual) {
    static String format(String message, Object expected, Object actual) {
    @Deprecated
    public static void assertEquals(String message, Object[] expecteds,
    @Deprecated
    public static void assertEquals(Object[] expecteds, Object[] actuals) {
    @Deprecated
    public static <T> void assertThat(T actual, Matcher<? super T> matcher) {
    @Deprecated
    public static <T> void assertThat(String reason, T actual,
            Matcher<? super T> matcher) {
    public static void assertThrows(Class<? extends Throwable> expectedThrowable, ThrowingRunnable runnable) {
    public static <T extends Throwable> T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable) {

    // For AssertJ Guava:
    public static ByteSourceAssert assertThat(ByteSource actual) {

    public static <K,V> MultimapAssert<K, V> assertThat(Multimap<K, V> actual) {

    public static <T> OptionalAssert<T> assertThat(Optional<T> actual) {

    public static <T extends Comparable<T>> RangeAssert<T> assertThat(Range<T> actual) {

    public static <K extends Comparable<K>, V> RangeMapAssert<K, V> assertThat(RangeMap<K, V> actual) {

    public static <R,C,V> TableAssert<R, C, V> assertThat(Table<R, C, V> actual) {

    public static <K,V> org.assertj.core.data.MapEntry<K, V> entry(K key,
                                                                  V value) {
                                                                  
    // For AssertJ DB
    public static TableAssert assertThat(Table table) {
    
    public static RequestAssert assertThat(Request request) {
    
    public static ChangesAssert assertThat(Changes changes) {
    
    public static byte[] bytesContentOf(File file) {  
    
    public static byte[] bytesContentFromClassPathOf(String resource) {
    
    
    // FOR JSoup:
    
    package org.jsoup;

import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.jsoup.helper.DataUtil;
import org.jsoup.helper.HttpConnection;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

/**
 The core public access point to the jsoup functionality.
 @author Jonathan Hedley */
public class Jsoup {
    private Jsoup() {}

    /**
     Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.
     @param html    HTML to parse
     @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur
     before the HTML declares a {@code <base href>} tag.
     @return sane HTML
     */
    public static Document parse(String html, String baseUri) {
        return Parser.parse(html, baseUri);
    }

    /**
     Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML
     (non-HTML) parser.
     @param html    HTML to parse
     @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur
     before the HTML declares a {@code <base href>} tag.
     @param parser alternate {@link Parser#xmlParser() parser} to use.
     @return sane HTML
     */
    public static Document parse(String html, String baseUri, Parser parser) {
        return parser.parseInput(html, baseUri);
    }

    /**
     Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a
     {@code <base href>} tag.
     @param html HTML to parse
     @return sane HTML
     @see #parse(String, String)
     */
    public static Document parse(String html) {
        return Parser.parse(html, "");
    }

    /**
     * Creates a new {@link Connection} to a URL. Use to fetch and parse a HTML page.
     * <p>
     * Use examples:
     * <ul>
     *  <li><code>Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get();</code></li>
     *  <li><code>Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post();</code></li>
     * </ul>
     * @param url URL to connect to. The protocol must be {@code http} or {@code https}.
     * @return the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.
     */
    public static Connection connect(String url) {
        return HttpConnection.connect(url);
    }

    /**
     Parse the contents of a file as HTML.
     @param in          file to load HTML from
     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if
     present, or fall back to {@code UTF-8} (which is often safe to do).
     @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.
     @return sane HTML
     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.
     */
    public static Document parse(File in, String charsetName, String baseUri) throws IOException {
        return DataUtil.load(in, charsetName, baseUri);
    }

    /**
     Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.
     @param in          file to load HTML from
     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if
     present, or fall back to {@code UTF-8} (which is often safe to do).
     @return sane HTML
     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.
     @see #parse(File, String, String)
     */
    public static Document parse(File in, String charsetName) throws IOException {
        return DataUtil.load(in, charsetName, in.getAbsolutePath());
    }

     /**
     Read an input stream, and parse it to a Document.
     @param in          input stream to read. Make sure to close it after parsing.
     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if
     present, or fall back to {@code UTF-8} (which is often safe to do).
     @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.
     @return sane HTML
     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.
     */
    public static Document parse(InputStream in, String charsetName, String baseUri) throws IOException {
        return DataUtil.load(in, charsetName, baseUri);
    }

    /**
     Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML
     (non-HTML) parser.
     @param in          input stream to read. Make sure to close it after parsing.
     @param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if
     present, or fall back to {@code UTF-8} (which is often safe to do).
     @param baseUri     The URL where the HTML was retrieved from, to resolve relative links against.
     @param parser alternate {@link Parser#xmlParser() parser} to use.
     @return sane HTML
     @throws IOException if the file could not be found, or read, or if the charsetName is invalid.
     */
    public static Document parse(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
        return DataUtil.load(in, charsetName, baseUri, parser);
    }

    /**
     Parse a fragment of HTML, with the assumption that it forms the {@code body} of the HTML.
     @param bodyHtml body HTML fragment
     @param baseUri  URL to resolve relative URLs against.
     @return sane HTML document
     @see Document#body()
     */
    public static Document parseBodyFragment(String bodyHtml, String baseUri) {
        return Parser.parseBodyFragment(bodyHtml, baseUri);
    }

    /**
     Parse a fragment of HTML, with the assumption that it forms the {@code body} of the HTML.
     @param bodyHtml body HTML fragment
     @return sane HTML document
     @see Document#body()
     */
    public static Document parseBodyFragment(String bodyHtml) {
        return Parser.parseBodyFragment(bodyHtml, "");
    }

    /**
     Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use {@link #connect(String)} instead.
     <p>
     The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to {@code UTF-8}.
     @param url           URL to fetch (with a GET). The protocol must be {@code http} or {@code https}.
     @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.
     @return The parsed HTML.
     @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
     @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored
     @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored
     @throws java.net.SocketTimeoutException if the connection times out
     @throws IOException if a connection or read error occurs
     @see #connect(String)
     */
    public static Document parse(URL url, int timeoutMillis) throws IOException {
        Connection con = HttpConnection.connect(url);
        con.timeout(timeoutMillis);
        return con.get();
    }

    /**
     Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted
     tags and attributes.
     @param bodyHtml  input untrusted HTML (body fragment)
     @param baseUri   URL to resolve relative URLs against
     @param whitelist white-list of permitted HTML elements
     @return safe HTML (body fragment)
     @see Cleaner#clean(Document)
     */
    public static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {
        Document dirty = parseBodyFragment(bodyHtml, baseUri);
        Cleaner cleaner = new Cleaner(whitelist);
        Document clean = cleaner.clean(dirty);
        return clean.body().html();
    }

    /**
     Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted
     tags and attributes.
     @param bodyHtml  input untrusted HTML (body fragment)
     @param whitelist white-list of permitted HTML elements
     @return safe HTML (body fragment)
     @see Cleaner#clean(Document)
     */
    public static String clean(String bodyHtml, Whitelist whitelist) {
        return clean(bodyHtml, "", whitelist);
    }

    /**
     * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of
     * permitted
     * tags and attributes.
     *
     * @param bodyHtml input untrusted HTML (body fragment)
     * @param baseUri URL to resolve relative URLs against
     * @param whitelist white-list of permitted HTML elements
     * @param outputSettings document output settings; use to control pretty-printing and entity escape modes
     * @return safe HTML (body fragment)
     * @see Cleaner#clean(Document)
     */
    public static String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) {
        Document dirty = parseBodyFragment(bodyHtml, baseUri);
        Cleaner cleaner = new Cleaner(whitelist);
        Document clean = cleaner.clean(dirty);
        clean.outputSettings(outputSettings);
        return clean.body().html();
    }

    /**
     Test if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should
     still be run through the cleaner to set up enforced attributes, and to tidy the output.
     @param bodyHtml HTML to test
     @param whitelist whitelist to test against
     @return true if no tags or attributes were removed; false otherwise
     @see #clean(String, org.jsoup.safety.Whitelist) 
     */
    public static boolean isValid(String bodyHtml, Whitelist whitelist) {
        Document dirty = parseBodyFragment(bodyHtml, "");
        Cleaner cleaner = new Cleaner(whitelist);
        return cleaner.isValid(dirty);
    }
    
    
    
    // From Awaitility
        /**
     * Instruct Awaitility to catch uncaught exceptions from other threads by
     * default. This is useful in multi-threaded systems when you want your test
     * to fail regardless of which thread throwing the exception. Default is
     * <code>true</code>.
     */
    public static void catchUncaughtExceptionsByDefault() {
        defaultCatchUncaughtExceptions = true;
    }

    /**
     * Instruct Awaitility not to catch uncaught exceptions from other threads.
     * Your test will not fail if another thread throws an exception.
     */
    public static void doNotCatchUncaughtExceptionsByDefault() {
        defaultCatchUncaughtExceptions = false;
    }

    /**
     * Instruct Awaitility to ignore caught or uncaught exceptions during condition evaluation.
     * Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail
     * upon an exception, unless it times out.
     */
    public static void ignoreExceptionsByDefault() {
        defaultExceptionIgnorer = new PredicateExceptionIgnorer(new Predicate<Exception>() {
            public boolean matches(Exception e) {
                return true;
            }
        });
    }

    /**
     * Instruct Awaitility to ignore caught exception of the given type during condition evaluation.
     * Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail
     * upon an exception matching the supplied exception type, unless it times out.
     */
    public static void ignoreExceptionByDefault(final Class<? extends Exception> exceptionType) {
        defaultExceptionIgnorer = new PredicateExceptionIgnorer(new Predicate<Exception>() {
            public boolean matches(Exception e) {
                return e.getClass().equals(exceptionType);
            }
        });
    }

    /**
     * Instruct Awaitility to ignore caught exceptions matching the given <code>predicate</code> during condition evaluation.
     * Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail
     * upon an exception matching the supplied predicate, unless it times out.
     */
    public static void ignoreExceptionsByDefaultMatching(Predicate<Exception> predicate) {
        defaultExceptionIgnorer = new PredicateExceptionIgnorer(predicate);
    }

    /**
     * Instruct Awaitility to ignore caught exceptions matching the supplied <code>matcher</code> during condition evaluation.
     * Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail
     * upon an exception matching the supplied exception type, unless it times out.
     */
    public static void ignoreExceptionsByDefaultMatching(Matcher<? super Exception> matcher) {
        defaultExceptionIgnorer = new HamcrestExceptionIgnorer(matcher);
    }

    /**
     * Reset the timeout, poll interval, poll delay, uncaught exception handling
     * to their default values:
     * <p>&nbsp;</p>
     * <ul>
     * <li>timeout - 10 seconds</li>
     * <li>poll interval - 100 milliseconds</li>
     * <li>poll delay - 100 milliseconds</li>
     * <li>Catch all uncaught exceptions - true</li>
     * <li>Do not ignore caught exceptions</li>
     * <li>Don't handle condition evaluation results</li>
     * </ul>
     */
    public static void reset() {
        defaultPollInterval = DEFAULT_POLL_INTERVAL;
        defaultPollDelay = DEFAULT_POLL_DELAY;
        defaultTimeout = Duration.TEN_SECONDS;
        defaultCatchUncaughtExceptions = true;
        defaultConditionEvaluationListener = null;
        defaultExceptionIgnorer = new PredicateExceptionIgnorer(new Predicate<Exception>() {
            public boolean matches(Exception e) {
                return false;
            }
        });
        Thread.setDefaultUncaughtExceptionHandler(null);
        MethodCallRecorder.reset();
    }

    /**
     * Start building an await statement.
     *
     * @return the condition factory
     */
    public static ConditionFactory await() {
        return await(null);
    }

    /**
     * Start building a named await statement. This is useful is cases when you
     * have several awaits in your test and you need to tell them apart. If a
     * named await timeout's the <code>alias</code> will be displayed indicating
     * which await statement that failed.
     *
     * @param alias the alias that will be shown if the await timeouts.
     * @return the condition factory
     */
    public static ConditionFactory await(String alias) {
        return new ConditionFactory(alias, defaultTimeout, defaultPollInterval, defaultPollDelay,
                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener);
    }

    /**
     * Catching uncaught exceptions in other threads. This will make the await
     * statement fail even if exceptions occur in other threads. This is the
     * default behavior.
     *
     * @return the condition factory
     */
    public static ConditionFactory catchUncaughtExceptions() {
        return new ConditionFactory(defaultTimeout, defaultPollInterval, defaultPollDelay, true, defaultExceptionIgnorer);
    }

    /**
     * Don't catch uncaught exceptions in other threads. This will <i>not</i>
     * make the await statement fail if exceptions occur in other threads.
     *
     * @return the condition factory
     */
    public static ConditionFactory dontCatchUncaughtExceptions() {
        return new ConditionFactory(defaultTimeout, defaultPollInterval, defaultPollDelay, false, defaultExceptionIgnorer);
    }

    /**
     * Start constructing an await statement with some settings. E.g.
     * <p/>
     * <pre>
     * with().pollInterval(20, MILLISECONDS).await().until(somethingHappens());
     * </pre>
     *
     * @return the condition factory
     */
    public static ConditionFactory with() {
        return new ConditionFactory(defaultTimeout, defaultPollInterval, defaultPollDelay,
                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener);
    }

    /**
     * Start constructing an await statement given some settings. E.g.
     * <p/>
     * <pre>
     * given().pollInterval(20, MILLISECONDS).then().await().until(somethingHappens());
     * </pre>
     *
     * @return the condition factory
     */
    public static ConditionFactory given() {
        return new ConditionFactory(defaultTimeout, defaultPollInterval, defaultPollDelay,
                defaultCatchUncaughtExceptions, defaultExceptionIgnorer);
    }

    /**
     * An alternative to using {@link #await()} if you want to specify a timeout
     * directly.
     *
     * @param timeout the timeout
     * @return the condition factory
     */
    public static ConditionFactory waitAtMost(Duration timeout) {
        return new ConditionFactory(timeout, defaultPollInterval, defaultPollDelay, defaultCatchUncaughtExceptions,
                defaultExceptionIgnorer);
    }

    /**
     * An alternative to using {@link #await()} if you want to specify a timeout
     * directly.
     *
     * @param value the value
     * @param unit  the unit
     * @return the condition factory
     */
    public static ConditionFactory waitAtMost(long value, TimeUnit unit) {
        return new ConditionFactory(new Duration(value, unit), defaultPollInterval, defaultPollDelay,
                defaultCatchUncaughtExceptions, defaultExceptionIgnorer);
    }

    /**
     * Sets the default poll interval that all await statements will use.
     *
     * @param pollInterval the poll interval
     * @param unit         the unit
     */
    public static void setDefaultPollInterval(long pollInterval, TimeUnit unit) {
        defaultPollInterval = new FixedPollInterval(new Duration(pollInterval, unit));
    }

    /**
     * Sets the default poll delay all await statements will use.
     *
     * @param pollDelay the poll delay
     * @param unit      the unit
     */
    public static void setDefaultPollDelay(long pollDelay, TimeUnit unit) {
        defaultPollDelay = new Duration(pollDelay, unit);
    }

    /**
     * Sets the default timeout all await statements will use.
     *
     * @param timeout the timeout
     * @param unit    the unit
     */
    public static void setDefaultTimeout(long timeout, TimeUnit unit) {
        defaultTimeout = new Duration(timeout, unit);
    }

    /**
     * Sets the default poll interval that all await statements will use.
     *
     * @param pollInterval the new default poll interval
     */
    public static void setDefaultPollInterval(Duration pollInterval) {
        if (pollInterval == null) {
            throw new IllegalArgumentException("You must specify a poll interval (was null).");
        }
        defaultPollInterval = new FixedPollInterval(pollInterval);
    }

    /**
     * Sets the default poll interval that all await statements will use.
     *
     * @param pollInterval the new default poll interval
     */
    public static void setDefaultPollInterval(PollInterval pollInterval) {
        if (pollInterval == null) {
            throw new IllegalArgumentException("You must specify a poll interval (was null).");
        }
        defaultPollInterval = pollInterval;
    }

    /**
     * Sets the default poll delay that all await statements will use.
     *
     * @param pollDelay the new default poll delay
     */
    public static void setDefaultPollDelay(Duration pollDelay) {
        if (pollDelay == null) {
            throw new IllegalArgumentException("You must specify a poll delay (was null).");
        }
        defaultPollDelay = pollDelay;
    }

    /**
     * Sets the default timeout that all await statements will use.
     *
     * @param defaultTimeout the new default timeout
     */
    public static void setDefaultTimeout(Duration defaultTimeout) {
        if (defaultTimeout == null) {
            throw new IllegalArgumentException("You must specify a default timeout (was null).");
        }
        Awaitility.defaultTimeout = defaultTimeout;
    }

    /**
     * Sets the default condition evaluation listener that all await statements will use.
     *
     * @param defaultConditionEvaluationListener handles condition evaluation each time evaluation of a condition occurs. Works only with Hamcrest matcher-based conditions.
     */
    public static void setDefaultConditionEvaluationListener(ConditionEvaluationListener defaultConditionEvaluationListener) {
        Awaitility.defaultConditionEvaluationListener = defaultConditionEvaluationListener;
    }

    /**
     * Await until a specific method invocation returns something. E.g.
     * <p/>
     * <pre>
     * await().untilCall(to(service).getCount(), greaterThan(2));
     * </pre>
     * <p/>
     * Here we tell Awaitility to wait until the <code>service.getCount()</code>
     * method returns a value that is greater than 2.
     *
     * @param <S>    The type of the service.
     * @param object the object that contains the method of interest.
     * @return A proxy of the service
     */
    @SuppressWarnings("unchecked")
    public static <S> S to(S object) {
        return (S) MethodCallRecorder.createProxy(object);
    }

    /**
     * Await until a {@link ThrowingRunnable} supplier execution passes (ends without throwing an exception).
     * <p>&nbsp;</p>
     * This method is intended to benefit from lambda expressions introduced in Java 8. It allows to use standard AssertJ/FEST Assert assertions
     * (by the way also standard JUnit/TestNG assertions) to test asynchronous calls and systems.
     * It accepts {@link ThrowingRunnable} interface instead of plain {@link Runnable} to allow passing lambda expressions that throw exceptions
     * in their bodies, e.g.:
     * <pre>
     * await().until(matches(() -> {
     *      methodThatHasThrowsInItsDeclaration();
     * }));
     * </pre>
     * when using {@link Runnable} user would have to write something like:
     * <pre>
     * await().until(matches(() -> {
     *      try {
     *          methodThatHasThrowsInItsDeclaration();
     *      } catch(Exception e) {
     *          throw new RuntimeException(e);
     *      }
     * }));
     * </pre>
     * <p>&nbsp;</p>
     * {@link java.lang.AssertionError} instances thrown by the supplier are treated as an assertion failure and proper error message is propagated on timeout.
     * Other exceptions are rethrown immediately as an execution errors.
     *
     * @param throwingRunnable the supplier that is responsible for executing the assertion and throwing AssertionError on failure.
     * @throws com.jayway.awaitility.core.ConditionTimeoutException If condition was not fulfilled within the given time period.
     * @since 1.7.0
     */
    public static Runnable matches(final ThrowingRunnable throwingRunnable) {
        return new Runnable() {
            public void run() {
                try {
                    throwingRunnable.run();
                } catch (Throwable e) {
                    CheckedExceptionRethrower.safeRethrow(e);
                }
            }
        };
    }

    /**
     * Await until an instance field matches something. E.g.
     * <p/>
     * <pre>
     * await().until(fieldIn(service).ofType(int.class).andWithName("fieldName"), greaterThan(2));
     * </pre>
     * <p/>
     * Here Awaitility waits until a field with name <code>fieldName</code> and of the <code>int.class</code>
     * in object <code>service</code> is greater than 2.
     * <p/>
     * Note that the field must be thread-safe in order to guarantee correct behavior.
     *
     * @param object The object that contains the field.
     * @return A field supplier builder which lets you specify the parameters needed to find the field.
     */
    public static FieldSupplierBuilder fieldIn(Object object) {
        return new FieldSupplierBuilder(object);
    }

    /**
     * Await until a static field matches something. E.g.
     * <p/>
     * <pre>
     * await().until(fieldIn(Service.class).ofType(int.class).andWithName("fieldName"), greaterThan(2));
     * </pre>
     * <p/>
     * Here Awaitility waits until a static field with name <code>fieldName</code> and of the
     * <code>int.class</code> in object <code>service</code> is greater than 2.
     * <p/>
     * Note that the field must be thread-safe in order to guarantee correct behavior.
     *
     * @param clazz The class that contains the static field.
     * @return A field supplier builder which lets you specify the parameters needed to find the field.
     */
    public static FieldSupplierBuilder fieldIn(Class<?> clazz) {
        return new FieldSupplierBuilder(clazz);
    }
    
    
}                                                            